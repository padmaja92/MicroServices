package com.java.config;

import java.util.Properties;

import javax.sql.DataSource;
import javax.transaction.TransactionManager;

import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.PropertySource;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.hibernate5.HibernateTransactionManager;
import org.springframework.orm.hibernate5.LocalSessionFactoryBean;

@PropertySource(value = { "classpath:application.properties" })
public class DatasourceConfig {
	
	@Value("${spring.datasource.username}")
	private String username;
	
	@Value("${spring.datasource.password}")
	private String password;
	
	@Value("${spring.datasource.url}")
	private String dataSourceURL;
	
	@Value("${spring.datasource.username}")
	private String driverClassName;
	
	@Value("${spring.jpa.properties.hibernate.dialect}")
	private String dialect;
	
	private String packagesToScan = "com.java.model";


	

	// Creating data source properties
	@Bean
	public DataSource dataSourceConfig() {
		DriverManagerDataSource dataSource = new DriverManagerDataSource(dataSourceURL, username, password);
		dataSource.setDriverClassName(driverClassName);
		return dataSource;
		
	}
	

	// Creating hibernate proprties
	private Properties hibernateProperties() {
		Properties prop = new Properties();
		prop.put("hibernate.dialect", dialect);
		prop.put("hibernate.hbm2ddl.auto", "update");	
		prop.put("hibernate.show.sql", true);
		return prop;
	}
	
	@Bean
	public LocalSessionFactoryBean sessionFactory() {
		LocalSessionFactoryBean factoryBean = new LocalSessionFactoryBean();
		factoryBean.setDataSource(dataSourceConfig());
		factoryBean.setHibernateProperties(hibernateProperties());
		factoryBean.setPackagesToScan(packagesToScan);
		return factoryBean;
		
	}
	
	@Bean
	@Autowired
	public HibernateTransactionManager transactionManager(SessionFactory sessionFactory) {
		HibernateTransactionManager trans = new HibernateTransactionManager();
		trans.setSessionFactory(sessionFactory);
		return trans;
	}
	
	
}
